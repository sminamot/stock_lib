moment = require('moment');

const isWeekday = function(date) {
  const holiday = {
    '20141223': '天皇誕生日',
    '20141231': '大晦日', // 休日ではないが取引ができないので祝日扱いにする
    '20150101': '元日',
    '20150102': '未取引日', // 休日ではないが取引ができないので祝日扱いにする
    '20150112': '成人の日',
    '20150211': '建国記念の日',
    '20150321': '振替休日',
    '20150429': '昭和の日',
    '20150503': '憲法記念日',
    '20150504': 'みどりの日',
    '20150505': 'こどもの日',
    '20150505': '振替休日',
    '20150720': '海の日',
    '20150920': '敬老の日',
    '20150922': '国民の休日',
    '20150922': '秋分の日',
    '20151012': '体育の日',
    '20151103': '文化の日',
    '20151123': '勤労感謝の日',
    '20151223': '天皇誕生日',
    '20151231': '大晦日', // 休日ではないが取引ができないので祝日扱いにする
    '20160101': '元日',
    '20160102': '祝日扱い', // 休日ではないが取引ができないので祝日扱いにする
    '20160103': '祝日扱い', // 休日ではないが取引ができないので祝日扱いにする
    '20160111': '成人の日',
    '20160211': '建国記念の日',
    '20160320': '春分の日',
    '20160321': '振替休日',
    '20160429': '昭和の日',
    '20160503': '憲法記念日',
    '20160504': 'みどりの日',
    '20160505': 'こどもの日',
    '20160718': '海の日',
    '20160811': '山の日',
    '20160919': '敬老の日',
    '20160922': '秋分の日',
    '20161010': '体育の日',
    '20161103': '文化の日',
    '20161123': '勤労感謝の日',
    '20161223': '天皇誕生日',
    '20161231': '大晦日', // 休日ではないが取引ができないので祝日扱いにする
    '20170101': '元日',
    '20170102': '振替休日',
    '20170103': '祝日扱い', // 休日ではないが取引ができないので祝日扱いにする
    '20170109': '成人の日',
    '20170211': '建国記念の日',
    '20170320': '春分の日',
    '20170429': '昭和の日',
    '20170503': '憲法記念日',
    '20170504': 'みどりの日',
    '20170505': 'こどもの日',
    '20170717': '海の日',
    '20170811': '山の日',
    '20170918': '敬老の日',
    '20170923': '秋分の日',
    '20171009': '体育の日',
    '20171103': '文化の日',
    '20171123': '勤労感謝の日',
    '20171223': '天皇誕生日',
    '20171231': '大晦日', // 休日ではないが取引ができないので祝日扱いにする
  };

  if (moment(date).format('YYYYMMDD') in holiday) {
    return false;
  }

  if (moment(date).day() === 0 || moment(date).day() === 6) {
    return false;
  }

  return true;
};

const isTargetMarket = function (market) {
  const targetMarket = [
    '東証1部',
    '東証2部',
    'JQスタンダード',
  ];
  if (targetMarket.indexOf(market) >= 0) {
    return true;
  }
  return false;
};

const getBusinessDayBefore = function(date, n) {
  var ret = '';
  if (n < 0) {
    return ret;
  }

  var count = 0;
  var i = -1;
  while (count < n) {
    ret = moment(date).add(i, 'days').format('YYYYMMDD');
    if (isWeekday(ret)) {
      count++;
    }
    i--;
  }
  return ret;
};

const stock = {
  isWeekday: isWeekday,
  isTargetMarket: isTargetMarket,
  getBusinessDayBefore: getBusinessDayBefore,
};

module.exports = stock;
